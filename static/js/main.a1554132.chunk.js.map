{"version":3,"sources":["components/SWCard/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["SWCard","props","react_default","a","createElement","className","onClick","select","id","alt","name","src","image","Wrapper","modalText","right","reset","win","lose","children","sw","sw1","sw2","sw3","sw4","cloneslvl1","cloneslvl2","cloneslvl3","cloneslvl4","shuffle","random","j","length","randomizer","Math","floor","_ref","i","newSW","App","state","swchars","chosen","count","open","levelReset","_this","setState","levelDown","levelUp","onOpenModal","onCloseModal","concat","Object","toConsumableArray","find","parseFloat","_this2","this","Fragment","index_es","classNames","modal","onClose","center","components_Wrapper","map","swchar","components_SWCard","key","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.a1554132.chunk.js","sourcesContent":["// Depend on React, add some styles.\nimport React from \"react\";\nimport \"./style.css\";\n\n// Create the responsive boxes for the clicky pictures.\nfunction SWCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\" onClick={() => props.select(props.id)}>\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\n// Exports it\nexport default SWCard;","// Dependencies for react and style\nimport React from \"react\";\nimport \"./style.css\";\n\n// Makes the Wrapper tag.\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\n// Exports Wrapper\nexport default Wrapper;","// Imports all the things\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal from \"react-responsive-modal\";\nimport SWCard from \"./components/SWCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport sw1 from \"./sw1.json\";\nimport sw2 from \"./sw2.json\";\nimport sw3 from \"./sw3.json\";\nimport sw4 from \"./sw4.json\";\nimport cloneslvl1 from \"./cloneslvl1.json\";\nimport cloneslvl2 from \"./cloneslvl2.json\";\nimport cloneslvl3 from \"./cloneslvl3.json\";\nimport cloneslvl4 from \"./cloneslvl4.json\";\nimport \"./App.css\";\n\n// Builds an array from the imported jsons.\nconst sw = [sw1, sw2, sw3, sw4, cloneslvl1, cloneslvl2, cloneslvl3, cloneslvl4];\n\n// Builds a shuffler function to shuffle the array of sw we will pass into it.\nconst shuffle = random => {\n  for (let j = random.length - 1; j > 0; j--) {\n    const randomizer = Math.floor(Math.random() * (j + 1));\n    [random[j], random[randomizer]] = [random[randomizer], random[j]];\n  }\n  return random;\n};\n\n// Defines i to 0\nlet i = 0,\n// Shuffles the SW array into a new, shuffled array.\n   newSW = shuffle(sw[i]),\n// Some global variables to avoid error objection later. https://i.kym-cdn.com/photos/images/newsfeed/001/264/842/220.png\n   modalText,\n   right,\n   reset,\n   win,\n   lose,\n   levelReset,\n   levelDown,\n   levelUp;\n\n//  So begins the App.\nclass App extends React.Component {\n  // Defines initial states.\n  state = {\n    // Uses the shuffled SW array\n    swchars: newSW,\n    // An empty array we will fill with clicked on images.\n    chosen: [],\n    // Current win streak for this level\n    count: 0,\n    // Whether the modal is open or closed.\n    open: false,\n  };\n\n  // A function that serves as Reset because I am the wettest, and can't figure out how to use it elsewhere correctly.\n  levelReset = () => \n   // Resets all State variables other than modal, which polices its own dang self.\n    this.setState({\n      chosen: [],\n      count: 0,\n      swchars: newSW\n    });\n\n  // Function for the level down button.\n  levelDown = () => {\n    // Checks if the current level is 1[zeroth in array]. \n    // If it is, it'll just shuffle for you and reset the game.\n    // If it isn't, it'll decrement the level by 1, going back a level.\n    i === 0 ? i=0 : i--;\n    newSW = shuffle(sw[i]);\n    this.levelReset();\n  };\n\n  // Function for the level up button.\n  levelUp = () => {\n    // Checks if the current level is 8[seventh in array]. \n    // If it is, it'll just shuffle for you and reset the game.\n    // If it isn't, it'll increment the level by 1.\n    i === 7 ? i=7: i++;\n    newSW = shuffle(sw[i]);\n    this.levelReset();\n  };\n\n  // Modal open and close functions\n  onOpenModal = () => {\n    this.setState({ open: true });\n  };\n\n  onCloseModal = () => {\n    this.setState({ open: false });\n  };\n\n  // When you select a picture...\n  select = id => {\n    // When correctly choosing a new picture...\n    right = () =>\n      this.setState({\n        // Adds the chosen picture to the chosen array\n        chosen: [\n          ...this.state.chosen,\n          this.state.swchars.find(sw => sw.id === id)\n        ],\n        // Increases the count by 1\n        count: parseFloat(this.state.count) + 1\n      });\n\n    // When resetting the game...\n    reset = () =>\n      // Sets all the states back to base.\n      this.setState({\n        chosen: [],\n        count: 0,\n        swchars: newSW\n      });\n\n    // When winning a level...\n    win = () => {\n      // Increments the sw array by 1.\n      i++;\n      // If the index being incremented is 8...\n      if (i === 8) {\n        // Sets index to 0\n        i = 0;\n        // Redefines newSW with a fresh shuffle\n        newSW = shuffle(sw[i]);\n        // Resets\n        reset();\n        // Notifies of victory!\n        modalText = \"You won! Try again?\";\n        this.onOpenModal();\n      // If the index being incremented is NOT 8...\n      } else {\n        // If the index being incremented is 4...\n        if (i === 4) {\n          // Redefines a newSW with a fresh shuffle.\n          newSW = shuffle(sw[i]);\n          // Resets\n          reset();\n          // Notifies that the game is about to CRAZY MODE\n          modalText = \"Ready for hardmode?\";\n          this.onOpenModal();\n        }\n        // Otherwise, it shuffles and resets.\n        newSW = shuffle(sw[i]);\n        reset();\n      }\n    };\n\n    // When losing...\n    lose = () => {\n      // Resets index to 0...\n      i = 0;\n      // Redefines a newSW with a fresh shuffle\n      newSW = shuffle(sw[i]);\n      // Resets\n      reset();\n      // Notifies of loss\n      modalText = \"You lose.\";\n      this.onOpenModal();\n    };\n\n    // So, back to selections! When you click anything, it redefines newSW with a fresh shuffle.\n    newSW = shuffle(newSW);\n    // Searches if the chosen array has a match for the image you're clicking\n    // If not...\n    if (!this.state.chosen.find(sw => sw.id === id)) {\n      // Executes Right function\n      right();\n      // Checks for your total equalling the full length of the array [aka win condition]\n      if (this.state.count === this.state.swchars.length - 1) {\n        // Triggers win\n        win();\n      // Otherwise, just sets the newly shuffled array.\n      } else {\n        this.setState({\n          swchars: newSW\n        });\n      }\n    // If you DO have a match to a chosen array item...\n    } else {\n      // Executes Lose function.\n      lose();\n    }\n  };\n\n  // Render the page. Hoo boy, here we go.\n  render() {\n    // Modal stuff\n    const { open } = this.state;\n    // Actually sends stuff for rendering.\n    return (\n      <>\n        {/* More modal stuff */}\n        <Modal\n          open={open}\n          classNames={{ modal: \"modalStyle\" }}\n          onClose={this.onCloseModal}\n          center\n        >\n          <h2 className=\"modalText\">{modalText}</h2>\n        </Modal>\n        {/* Level Up and Level Down buttons, with click handlers executing functions above */}\n        <button className=\"levelDown\" onClick={() => this.levelDown()}>\n          Level Down\n        </button>\n        <button className=\"levelUp\" onClick={() => this.levelUp()}>\n          Level Up\n        </button>\n        {/* The scorekeeper */}\n        <h1 className=\"score\">\n          {this.state.count} / {this.state.swchars.length} <br />\n          Right\n        </h1>\n        {/* The level register */}\n        <h1 className=\"level\">\n          Level <br /> {parseFloat(i) + 1}\n        </h1>\n        {/* Game title */}\n        <h1 className=\"title\">\n          Star\n          <br />\n          Wars\n          <br />\n          Clicky\n          <br />\n          Game\n        </h1>\n        {/* Game instructions */}\n        <h1 className=\"game\">\n          Don't\n          <br />\n          click\n          <br />\n          anything\n          <br />\n          twice\n        </h1>\n        {/* Card structure */}\n        <Wrapper>\n          {this.state.swchars.map(swchar => (\n            <SWCard\n              key={swchar.name}\n              id={swchar.id}\n              image={swchar.image}\n              select={this.select}\n            />\n          ))}\n        </Wrapper>\n      </>\n    );\n  }\n}\n// Exports\nexport default App;\n","// Dependency\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Render the app to root on index\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}